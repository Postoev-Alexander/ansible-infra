---
- name: Restore PostgreSQL Database using postgresql_db
  hosts: postgres_appsheet
  #gather_facts: no

  vars_files:
    - group_vars/postgres_appsheet/postgres_appsheet.yml

  tasks:
    - name: "Check if the backup file name was provided"
      ansible.builtin.fail:
        msg: "ERROR: You must specify the backup file. Example: -e 'backup_file=/tmp/ansible_backups/backup.sql.gz'"
      when: backup_file is not defined

    - name: "1. Copy the backup file to the remote server"
      ansible.builtin.copy:
        src: "{{ backup_file }}"
        dest: "/tmp/restore_backup.sql.gz" # Временное имя на сервере
        mode: '0600'

    - name: "2. WARNING: This will DESTROY the current database"
      ansible.builtin.pause:
        prompt: "Press Enter to continue and WIPE the '{{ postgres_db_name }}' database, or Ctrl+C to cancel."
    
    - name: "2a. Forcefully disconnect all users from the database"
      community.postgresql.postgresql_query:
        db: postgres  # Подключаемся к стандартной базе 'postgres' для выполнения этой команды
        query: "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '{{ postgres_db_name }}' AND pid <> pg_backend_pid();"
        login_user: "{{ postgres_db_user }}"
        login_password: "{{ postgres_db_password }}"
        login_host: "{{ ansible_host }}"
        port: 5432
        ssl_mode: "require"
    
    - name: "3. Drop the existing database for a clean restore"
      community.postgresql.postgresql_db:
        name: "{{ postgres_db_name }}"
        state: absent
        login_user: "{{ postgres_db_user }}"
        login_password: "{{ postgres_db_password }}"
        login_host: "{{ ansible_host }}"
        port: 5432
        ssl_mode: "require"

    - name: "4. Create a new, empty database"
      community.postgresql.postgresql_db:
        name: "{{ postgres_db_name }}"
        state: present
        owner: "{{ postgres_db_user }}"
        login_user: "{{ postgres_db_user }}"
        login_password: "{{ postgres_db_password }}"
        login_host: "{{ ansible_host }}"
        port: 5432
        ssl_mode: "require"

    - name: "5. Restore the database from the backup file"
      community.postgresql.postgresql_db:
        name: "{{ postgres_db_name }}"
        state: restore
        target: "/tmp/restore_backup.sql.gz" # Путь к файлу на УДАЛЕННОМ сервере
        login_user: "{{ postgres_db_user }}"
        login_password: "{{ postgres_db_password }}"
        login_host: "{{ ansible_host }}"
        port: 5432
        ssl_mode: "require"

    - name: "6. Clean up the backup file from the DB server"
      ansible.builtin.file:
        path: "/tmp/restore_backup.sql.gz"
        state: absent

    - name: "SUCCESS: Restore is complete!"
      ansible.builtin.debug:
        msg: "Database '{{ postgres_db_name }}' has been restored from '{{ backup_file }}'."